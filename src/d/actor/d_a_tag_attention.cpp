//
// Generated by dtk
// Translation Unit: d_a_tag_attention.cpp
//

#include "d/actor/d_a_tag_attention.h"
#include "d/d_procname.h"
#include "d/d_priority.h"
#include "f_op/f_op_actor_mng.h"
#include "d/d_com_inf_game.h"

/* ram:8049162C-ram:804917AF  */
static dCcD_SrcSph sph_check_src = {
    // dCcD_SrcGObjInf
    {
        /* Flags             */ 0,
        /* SrcObjAt  Type    */ 0,
        /* SrcObjAt  Atp     */ 0,
        /* SrcObjAt  SPrm    */ 0,
        /* SrcObjTg  Type    */ 0,
        /* SrcObjTg  SPrm    */ 0,
        /* SrcObjCo  SPrm    */ cCcD_CoSPrm_Set_e | cCcD_CoSPrm_IsOther_e | cCcD_CoSPrm_NoCrr_e,
        /* SrcGObjAt Se      */ 0,
        /* SrcGObjAt HitMark */ dCcG_AtHitMark_None_e,
        /* SrcGObjAt Spl     */ dCcG_At_Spl_UNK0,
        /* SrcGObjAt Mtrl    */ 0,
        /* SrcGObjAt SPrm    */ 0,
        /* SrcGObjTg Se      */ 0,
        /* SrcGObjTg HitMark */ 0,
        /* SrcGObjTg Spl     */ dCcG_Tg_Spl_UNK0,
        /* SrcGObjTg Mtrl    */ 0,
        /* SrcGObjTg SPrm    */ 0,
        /* SrcGObjCo SPrm    */ 0,
    },
    // cM3dGSphS
    {
        /* Center */ 0.0f, 0.0f, 0.0f,
        /* Radius */ 10.0f,
    },
};

bool daTagAttention::Act_c::chk_inside(cXyz* pos) const {
    if (!m_b0x290){
        return false;
    }

    cXyz plyrToObjVec = dComIfGp_getPlayer(0)->current.pos - current.pos;
    if (subtype == 0){
        // spherical collision check
        f32 distance = plyrToObjVec.abs();
        
        if (distance > scale.x * 100.0f) {
            return false;
        }
    }else{
        // box collision check
        s16 yRotAngle = current.angle.y;
        if (yRotAngle != 0){
        if (current.angle.y){
            s16 yRotAngle = current.angle.y;
            f32 temp = 
                plyrToObjVec.x * cM_ssin(yRotAngle) +
                plyrToObjVec.z * cM_scos(yRotAngle);
            plyrToObjVec.x = 
                plyrToObjVec.x * cM_scos(yRotAngle) -
                plyrToObjVec.z * cM_ssin(yRotAngle);
            plyrToObjVec.z = temp;
        }

        f32 curScale = scale.x;
        if ((plyrToObjVec.x < -curScale * 100.0f) || (curScale * 100.0f > plyrToObjVec.x)){
            return false;
        }
        curScale = scale.y;
        if ((plyrToObjVec.y < -curScale * 100.0f) || (curScale * 100.0f > plyrToObjVec.y)){
            return false;
        }
        curScale = scale.z;
        if ((plyrToObjVec.z < -curScale * 100.0f) || (curScale * 100.0f > plyrToObjVec.z)){
            return false;
        }
    }

    *pos = current.pos;
    return true;
}

/* 00000078-00000188       .text _create__Q214daTagAttention5Act_cFv */
cPhs_State daTagAttention::Act_c::_create() {
    fopAcM_SetupActor(this, Act_c);
    mStts.Init(0xFF, 0xFF, this);
    mSph.Set(sph_check_src);
    mSph.SetStts(&mStts);
    return cPhs_COMPLEATE_e;
}

/* 00000340-00000480       .text _execute__Q214daTagAttention5Act_cFv */
bool daTagAttention::Act_c::_execute() {
    /* Nonmatching */
    mSph.SetC(current.pos);
    mSph.SetR(scale.x * 100.0f);
    dComIfG_Ccsp()->Set(&mSph);
    m_b0x290 = true;
    int iVar1 = prm_get_Type();
    if (iVar1 == 1){
        iVar1 = prm_get_swSave();
        BOOL bVar2 = dComIfGs_isSwitch(iVar1, home.roomNo);
        if (bVar2 == FALSE){
            m_b0x290 = false;
        }
    }else{
        iVar1 = prm_get_Type();
        if (iVar1 == 2){
            iVar1 = prm_get_swSave();
            BOOL bVar2 = dComIfGs_isSwitch(iVar1, home.roomNo);
            if (bVar2 == FALSE){
                m_b0x290 = false;
            }
        }
    }

    // TODO for matching: implement chk_inside and dComIfGp_att_Look2RequestF
    bool wasHit = chk_inside(&current.pos);
    if (wasHit){
        dComIfGp_att_Look2RequestF(this, 0x6000, 1);
    }

    return true;
}

namespace daTagAttention {
namespace {
/* 00000480-000004A0       .text Mthd_Create__Q214daTagAttention31@unnamed@d_a_tag_attention_cpp@FPv */
cPhs_State Mthd_Create(void* i_this) {
    return static_cast<Act_c*>(i_this)->_create();
}

/* 000004A0-000004A8       .text Mthd_Delete__Q214daTagAttention31@unnamed@d_a_tag_attention_cpp@FPv */
bool Mthd_Delete(void* i_this) {
    return TRUE;
}

/* 000004A8-000004C8       .text Mthd_Execute__Q214daTagAttention31@unnamed@d_a_tag_attention_cpp@FPv */
bool Mthd_Execute(void* i_this) {
    /* Nonmatching */
    return static_cast<Act_c*>(i_this)->_execute();
}

/* 000004C8-000004D0       .text Mthd_Draw__Q214daTagAttention31@unnamed@d_a_tag_attention_cpp@FPv */
BOOL Mthd_Draw(void* i_this) {
    return TRUE;
}

/* 000004D0-000004D8       .text Mthd_IsDelete__Q214daTagAttention31@unnamed@d_a_tag_attention_cpp@FPv */
BOOL Mthd_IsDelete(void* i_this) {
    return TRUE;
}

static actor_method_class Mthd_Table = {
    (process_method_func)Mthd_Create,
    (process_method_func)Mthd_Delete,
    (process_method_func)Mthd_Execute,
    (process_method_func)Mthd_IsDelete,
    (process_method_func)Mthd_Draw,
};
}; // namespace
}; // namespace daTagAttention

actor_process_profile_definition g_profile_Tag_Attention = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0009,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_Tag_Attention,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(daTagAttention::Act_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ PRIO_Tag_Attention,
    /* Actor SubMtd */ &daTagAttention::Mthd_Table,
    /* Status       */ fopAcStts_CULL_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
